#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jan 26 17:07:47 2017

@author: zdhughes
"""

#for i, element in enumerate(traceList):
#	myFont = {'fontname':'Liberation Serif'}
#	plt.figure(figsize=(9,6), dpi=100)
#	plt.subplot(111)
#	x = np.linspace(horizontalSymmetricStart,horizontalSymmetricStop,horizontalSampleNumber)
#	y1 = element[:,0]
#	y2 = element[:,1]
#	plt.plot(x, y1, color='blue', linewidth=0.5, linestyle="-")	
#	plt.plot(x, y2, color="red", linewidth=0.5, linestyle="-")
#	plt.xticks(np.linspace(horizontalSymmetricStart,horizontalSymmetricStop,horizontalGridNumber+1,endpoint=True),**myFont)
#	plt.ylim(veritcalStart,verticalEnd)
#	plt.yticks(np.linspace(veritcalStart,verticalEnd,vertialGridNumber+1,endpoint=True),**myFont)
#	plt.grid(True)
#	red_patch = mpatches.Patch(color='red', label='WLS Fiber PMT')
#	blue_patch = mpatches.Patch(color='blue', label='CsI PMT')
#	mpl.rc('font',family='Liberation Serif')
#	plt.legend(loc='lower right',handles=[red_patch,blue_patch])
#	plt.title('APT Raw Detector Trace',**myFont)
#	plt.xlabel('Time Relative to Trigger [$\mu s$]',**myFont)
#	plt.ylabel('Voltage [$V$]',**myFont)
#	plt.plot([SIL,SIL],[veritcalStart,verticalEnd],color='black',linestyle="--",alpha=0.65)
#	plt.plot([SIU,SIU],[veritcalStart,verticalEnd],color='black',linestyle="--",alpha=0.65)
#	plt.plot([PIL,PIL],[veritcalStart,verticalEnd],color='grey',linestyle="--",alpha=0.65)
#	plt.plot([PIU,PIU],[veritcalStart,verticalEnd],color='grey',linestyle="--",alpha=0.65)
#	plt.savefig('APT_raw_trace_'+str(i)+'.png',dpi=500)
#	plt.show()
#	plt.close()

#for i, element in enumerate(traceList):
#	myFont = {'fontname':'Liberation Serif'}
#	plt.figure(figsize=(9,6), dpi=100)
#	plt.subplot(111)
#	x = np.linspace(horizontalSymmetricStart,horizontalSymmetricStop,horizontalSampleNumber)
#	y1 = element[:,0]
#	y1 = ss.savgol_filter(y1,101,3)
#	y2 = element[:,1]
#	plt.plot(x, y2, color="red", linewidth=0.5, linestyle="-")
#	plt.plot(x, y1, color='blue', linewidth=1.0, linestyle="-")	
#	plt.xticks(np.linspace(horizontalSymmetricStart,horizontalSymmetricStop,horizontalGridNumber+1,endpoint=True),**myFont)
#	plt.ylim(veritcalStart,verticalEnd)
#	plt.yticks(np.linspace(veritcalStart,verticalEnd,vertialGridNumber+1,endpoint=True),**myFont)
#	plt.grid(True)
#	red_patch = mpatches.Patch(color='red', label='WLS Fiber PMT')
#	blue_patch = mpatches.Patch(color='blue', label='CsI PMT')
#	mpl.rc('font',family='Liberation Serif')
#	plt.legend(loc='lower right',handles=[red_patch,blue_patch])
#	plt.title('APT Smoothed Detector Trace',**myFont)
#	plt.xlabel('Time Relative to Trigger [$\mu s$]',**myFont)
#	plt.ylabel('Voltage [$V$]',**myFont)
#	#plt.savefig('APT_smoothed_trace_'+str(i)+'.png',dpi=500)
#	plt.close()

#myFont = {'fontname':'Liberation Serif'}
#plt.title('Simple Summed Pulse Height Distribution (Interval: [-1 $\mu s$, 3$\mu s$])',**myFont)
#plt.ylabel('Number of Events [$N$]',**myFont)
#plt.xlabel('-1$\cdot$Summed Voltage[$mV$]',**myFont)
#plt.hist(traceSums,bins=100)
#plt.show()

			extractedTrace = np.column_stack((extractedTrace1,extractedTrace2))
			
			
			
			
			
			
			
##intsert1	##		
			
			
channel1PedestalTrace = []
channel2PedestalTrace = []
channel1PedestalTraceSum = []
channel2PedestalTraceSum = []
channel1SignalTraceSum = []
channel2SignalTraceSum = []
channel1SignalTrace = []
channel2SignalTrace = []


	
for i, element in enumerate(traceList):
	
	y1 = element[:,0]
	y2 = element[:,1]
	
	channel1PedestalTrace.append(-1*(y1[int(1000*(PIL-horizontalSymmetricStart)):int(1000*(PIU-horizontalSymmetricStart))]))
	channel2PedestalTrace.append(-1*(y2[1000*(PIL-horizontalSymmetricStart):1000*(PIU-horizontalSymmetricStart)]))

	channel1PedestalTraceSum.append(-1*np.sum(y1[1000*(PIL-horizontalSymmetricStart):1000*(PIU-horizontalSymmetricStart)]))
	channel2PedestalTraceSum.append(-1*np.sum(y2[1000*(PIL-horizontalSymmetricStart):1000*(PIU-horizontalSymmetricStart)]))	
	
	channel1SignalTrace.append(-1*(y1[1000*(SIL-horizontalSymmetricStart):1000*(SIU-horizontalSymmetricStart)]))
	channel2SignalTrace.append(-1*(y2[1000*(SIL-horizontalSymmetricStart):1000*(SIU-horizontalSymmetricStart)]))
	
	san1 = 1000*(SIL-horizontalSymmetricStart)
	san2 = 1000*(SIU-horizontalSymmetricStart)
	#print('Sanity Check: '+str(san1)+', '+str(san2))
	
myFont = {'fontname':'Liberation Serif'}
bins = np.linspace(0,5,200)
plt.title('Summed Pedestal Distribution (Interval: ['+str(PIL)+' $\mu s$, '+str(PIU)+'$\mu s$])',**myFont)
plt.ylabel('Number of Events [$N$]',**myFont)
plt.xlabel('-1$\cdot$Summed Voltage[$mV$]',**myFont)
plt.hist(channel1PedestalTraceSum, bins, alpha=1., label='CsI Trace',color='blue')
plt.hist(channel2PedestalTraceSum, bins, alpha=1., label='WLS Fiber Trace',color='red')
plt.legend(loc='upper right')
plt.show()

check = str((1000*(PIU-PIL)))
print('check: '+check)


channel1Offset = np.median(channel1PedestalTraceSum)/(1000*(PIU-PIL))
channel2Offset = np.median(channel2PedestalTraceSum)/(1000*(PIU-PIL))

print(channel1Offset)
print(channel2Offset)


for i, element in enumerate(channel1SignalTrace):
	
	channel1SignalTrace[i] = channel1SignalTrace[i] - channel1Offset
	channel2SignalTrace[i] = channel2SignalTrace[i] - channel2Offset
	channel1SignalTraceSum.append(np.sum(channel1SignalTrace[i]))
	channel2SignalTraceSum.append(np.sum(channel2SignalTrace[i]))

	
	
myFont = {'fontname':'Liberation Serif'}
bins = np.linspace(np.min(channel1SignalTraceSum),np.max(channel1SignalTraceSum),100)
plt.title('Less Simple Summed PHD (Interval: ['+str(SIL)+' $\mu s$, '+str(SIU)+'$\mu s$])',**myFont)
plt.ylabel('Number of Events [$N$]',**myFont)
plt.xlabel('-1$\cdot$Summed Voltage[$mV$]',**myFont)
plt.hist(channel1SignalTraceSum, bins, alpha=1.0, label='CsI Trace',color='blue')
#plt.hist(channel2SignalTraceSum, alpha=0.5, label='WLS Fiber Trace',color='red')
plt.legend(loc='upper right')
plt.show()	





class tracePlotter:
	
	def __init__(self, config = None):
		self.config = config if config is not None else sys.exit('No config found for tracePlotter. Aborting.')
		
		
			
		
		
		
		
		
		
		
		

	
	
	
	
		
	def packageTraces(self, traces1, traces2, saveTraces=False, traceFilename = 'trace_'):
		
		packagedTrace = []
		for i, trash in enumerate(traces1):
			
			packagedTrace.append(np.column_stack((traces1[i],traces2[i])))

			if saveTraces == True:
				np.savetxt(traceFilename+str(i)+'.txt',packagedTrace[i],fmt='%.6e')			

		return packagedTrace
		
		#workingDir = /nfs/data_disks/herc0a/collaborations/APT/data/160104
#channel1 = TDS3k(CH1).txt
#channel2 = TDS3k(CH2).txt
#horizontalWidth = 20
#horizontalSampleNumber = 10000
#horizontalGridNumber = 10
#horizontalUnits = microseconds
#verticalUnits = volts
#verticalDivison = 0.005
#vertialGridNumber = 8
		
		
		
		
		
		
		
		
		
		
